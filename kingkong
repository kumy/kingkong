#!/usr/bin/perl -w
#
# Generate files from a YAML configuration file
#

use strict;
use Template;
use YAML;
use Hash::Merge qw( merge );
use Getopt::Long;
use File::Basename;

use constant CONFNAME => "kingkong.conf";
use constant VERSION => "0.1";

sub usage() {
   print "KingKong v".VERSION."\n";
   print "Usage: $0 [-h|--help|-?][-v|--verbose][-p|--print] <conffile|dir> [<conffile|dir>...]

 == KINGKONG Is Not a Genuine KONfiguration Generator ==

      <> ( oo )    Generate files from a YAML configuration file.
      <>_| ^^ |_ 
      <>   @    \\  Each parameter can be either a file or a directory.
     /~~\\ . . _ |  When a directory is passed, the file ".CONFNAME."
    /~~~~\\    | |  will be searched within this directory.
   /~~~~~~\\/ _| |
   |[][][]/ / [m]  The YAML file must contain at least a 'templates'
   |[][][[m]       array with the name of the files to generate.
   |[][][]|
   |[][][]|        Optionally, it can contain a 'template_extension'
   |[][][]|        variable, which defaults to 'tmpl'.
   |[][][]|
   |[][][]|        All values in the YAML file are passed to the
   |[][][]|        template to generate the file, using the Template
   |[][][]|        Perl module.
   |[][][]|
   |[|--|]|        In print mode (option --print), KingKong dumps
   |[|  |]|        the full YAML conf as generated with the includes
   ========        but doesn't process it.
  ==========
  |[[    ]]|
  ==========   
";
}


# Process options
my $help = 0;
my $print = 0;
my $verbose = 0;
my $includedir = '';
my $opts = GetOptions(
   'help|?'        => \$help,
   'print'         => \$print,
   'verbose'       => \$verbose,
   'includedir=s'  => \$includedir,
);

usage() and exit(0) if $help;

# Process arguments
my @conffiles = @ARGV;
@conffiles = ('.') unless ($#conffiles >= 0);


sub include_conf {
   my ($conf, $include) = @_;

   print "V: Including $include\n" if $verbose;
   my $yaml = YAML::LoadFile("$include");
   return merge($conf, $yaml);
}


foreach my $conffile (@conffiles) {
   $conffile = "$conffile/".CONFNAME if (-d $conffile);

   my $conf = YAML::LoadFile($conffile);
   
   # Use conf path to generate files
   my $dirname = dirname($conffile);

   # Manage includes
   if ($conf->{include}) {
      Hash::Merge::set_behavior( 'RIGHT_PRECEDENT' );
      foreach my $include (@{$conf->{include}}) {
         if (-e "$dirname/$include") {
            $conf = include_conf($conf, "$dirname/$include");
         } elsif ($includedir && -e "$includedir/$include") {
            $conf = include_conf($conf, "$includedir/$include");
         } else {
            die "E: Could not find include file $include";
         }
      }
      delete($conf->{include});
   }

   if ($print) {
      print YAML::Dump( $conf );
      next;
   }

   # Add info we need
   $conf->{program} = $0;
   $conf->{conffile} = $conffile;
   
   my $template = new Template(
      RELATIVE => 1,
      ABSOLUTE => 1,
      INCLUDE_PATH => "$dirname:$includedir",
      );
   my $tmpl_ext = $conf->{template_extension};
   $tmpl_ext ||= "tmpl";
   
   foreach my $file (@{$conf->{templates}}) {
      my $tmpl = "$file.$tmpl_ext";
      print "V: Generating $dirname/$file from $dirname/$tmpl\n" if $verbose;
      $template->process("$tmpl", $conf, "$dirname/$file")
         || die $template->error();
   }
}

